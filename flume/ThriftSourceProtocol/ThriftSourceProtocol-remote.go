/* Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/flume"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  append(event *ThriftFlumeEvent) (retval52 Status, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  appendBatch(events thrift.TList) (retval53 Status, err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := flume.NewThriftSourceProtocolClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "append":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "Append requires 1 args\n")
      flag.Usage()
    }
    arg54 := flag.Arg(1)
    mbTrans55 := thrift.NewTMemoryBufferLen(len(arg54))
    defer mbTrans55.Close()
    _, err56 := mbTrans55.WriteString(arg54)
    if err56 != nil {
      Usage()
      return
    }
    factory57 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt58 := factory57.GetProtocol(mbTrans55)
    argvalue0 := flume.NewThriftFlumeEvent()
    err59 := argvalue0.Read(jsProt58)
    if err59 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Append(value0))
    fmt.Print("\n")
    break
  case "appendBatch":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "AppendBatch requires 1 args\n")
      flag.Usage()
    }
    arg60 := flag.Arg(1)
    mbTrans61 := thrift.NewTMemoryBufferLen(len(arg60))
    defer mbTrans61.Close()
    _, err62 := mbTrans61.WriteString(arg60)
    if err62 != nil { 
      Usage()
      return
    }
    factory63 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt64 := factory63.GetProtocol(mbTrans61)
    containerStruct0 := flume.NewAppendBatchArgs()
    err65 := containerStruct0.ReadField1(jsProt64)
    if err65 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Events
    value0 := argvalue0
    fmt.Print(client.AppendBatch(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
