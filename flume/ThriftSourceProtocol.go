/* Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package flume;

import (
        "thrift"
        "fmt"
)

import (
        "os"
)


type IThriftSourceProtocol interface {
  /**
   * Parameters:
   *  - Event
   */
  Append(event *ThriftFlumeEvent) (retval18 Status, err os.Error)
  /**
   * Parameters:
   *  - Events
   */
  AppendBatch(events thrift.TList) (retval19 Status, err os.Error)
}

type ThriftSourceProtocolClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewThriftSourceProtocolClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThriftSourceProtocolClient {
  return &ThriftSourceProtocolClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewThriftSourceProtocolClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThriftSourceProtocolClient {
  return &ThriftSourceProtocolClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

/**
 * Parameters:
 *  - Event
 */
func (p *ThriftSourceProtocolClient) Append(event *ThriftFlumeEvent) (retval20 Status, err os.Error) {
  err = p.SendAppend(event)
  if err != nil { return }
  return p.RecvAppend()
}

func (p *ThriftSourceProtocolClient) SendAppend(event *ThriftFlumeEvent)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("append", thrift.CALL, p.SeqId)
  args21 := NewAppendArgs()
  args21.Event = event
  err = args21.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftSourceProtocolClient) RecvAppend() (value Status, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error23 := thrift.NewTApplicationExceptionDefault()
    error24, err := error23.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error24
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result22 := NewAppendResult()
  err = result22.Read(iprot)
  iprot.ReadMessageEnd()
  value = result22.Success
  return
}

/**
 * Parameters:
 *  - Events
 */
func (p *ThriftSourceProtocolClient) AppendBatch(events thrift.TList) (retval25 Status, err os.Error) {
  err = p.SendAppendBatch(events)
  if err != nil { return }
  return p.RecvAppendBatch()
}

func (p *ThriftSourceProtocolClient) SendAppendBatch(events thrift.TList)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("appendBatch", thrift.CALL, p.SeqId)
  args26 := NewAppendBatchArgs()
  args26.Events = events
  err = args26.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *ThriftSourceProtocolClient) RecvAppendBatch() (value Status, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error28 := thrift.NewTApplicationExceptionDefault()
    error29, err := error28.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error29
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result27 := NewAppendBatchResult()
  err = result27.Read(iprot)
  iprot.ReadMessageEnd()
  value = result27.Success
  return
}


type ThriftSourceProtocolProcessor struct {
  handler IThriftSourceProtocol
  processorMap map[string]thrift.TProcessorFunction
}

func (p *ThriftSourceProtocolProcessor) Handler() IThriftSourceProtocol {
  return p.handler
}

func (p *ThriftSourceProtocolProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ThriftSourceProtocolProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
  processor, exists = p.processorMap[key]
  return processor, exists
}

func (p *ThriftSourceProtocolProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewThriftSourceProtocolProcessor(handler IThriftSourceProtocol) *ThriftSourceProtocolProcessor {

  self30 := &ThriftSourceProtocolProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self30.processorMap["append"] = &thriftSourceProtocolProcessorAppend{handler:handler}
  self30.processorMap["appendBatch"] = &thriftSourceProtocolProcessorAppendBatch{handler:handler}
return self30
}

func (p *ThriftSourceProtocolProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return }
  process, nameFound := p.GetProcessorFunction(name)
  if !nameFound || process == nil {
    iprot.Skip(thrift.STRUCT)
    iprot.ReadMessageEnd()
    x31 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
    oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
    x31.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return false, x31
  }
  return process.Process(seqId, iprot, oprot)
}

type thriftSourceProtocolProcessorAppend struct {
  handler IThriftSourceProtocol
}

func (p *thriftSourceProtocolProcessorAppend) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAppendArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("append", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAppendResult()
  if result.Success, err = p.handler.Append(args.Event); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append: " + err.String())
    oprot.WriteMessageBegin("append", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("append", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftSourceProtocolProcessorAppendBatch struct {
  handler IThriftSourceProtocol
}

func (p *thriftSourceProtocolProcessorAppendBatch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAppendBatchArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("appendBatch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAppendBatchResult()
  if result.Success, err = p.handler.AppendBatch(args.Events); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing appendBatch: " + err.String())
    oprot.WriteMessageBegin("appendBatch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("appendBatch", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - Event
 */
type AppendArgs struct {
  thrift.TStruct
  Event *ThriftFlumeEvent "event"; // 1
}

func NewAppendArgs() *AppendArgs {
  output := &AppendArgs{
    TStruct:thrift.NewTStruct("append_args", []thrift.TField{
    thrift.NewTField("event", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *AppendArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "event" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Event = NewThriftFlumeEvent()
  err34 := p.Event.Read(iprot)
  if err34 != nil { return thrift.NewTProtocolExceptionReadStruct("p.EventThriftFlumeEvent", err34); }
  return err
}

func (p *AppendArgs) ReadFieldEvent(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AppendArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("append_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Event != nil {
    err = oprot.WriteFieldBegin("event", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "event", p.ThriftName(), err); }
    err = p.Event.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ThriftFlumeEvent", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "event", p.ThriftName(), err); }
  }
  return err
}

func (p *AppendArgs) WriteFieldEvent(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AppendArgs) TStructName() string {
  return "AppendArgs"
}

func (p *AppendArgs) ThriftName() string {
  return "append_args"
}

func (p *AppendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendArgs(%+v)", *p)
}

func (p *AppendArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AppendArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Event.CompareTo(data.Event); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AppendArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Event
  }
  return nil
}

func (p *AppendArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("event", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AppendResult struct {
  thrift.TStruct
  Success Status "success"; // 0
}

func NewAppendResult() *AppendResult {
  output := &AppendResult{
    TStruct:thrift.NewTStruct("append_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    }),
  }
  {
  }
  return output
}

func (p *AppendResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v35, err36 := iprot.ReadI32()
  if err36 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err36); }
  p.Success = Status(v35)
  return err
}

func (p *AppendResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AppendResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("append_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AppendResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AppendResult) TStructName() string {
  return "AppendResult"
}

func (p *AppendResult) ThriftName() string {
  return "append_result"
}

func (p *AppendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendResult(%+v)", *p)
}

func (p *AppendResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AppendResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AppendResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AppendResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    })
}

/**
 * Attributes:
 *  - Events
 */
type AppendBatchArgs struct {
  thrift.TStruct
  Events thrift.TList "events"; // 1
}

func NewAppendBatchArgs() *AppendBatchArgs {
  output := &AppendBatchArgs{
    TStruct:thrift.NewTStruct("appendBatch_args", []thrift.TField{
    thrift.NewTField("events", thrift.LIST, 1),
    }),
  }
  {
  }
  return output
}

func (p *AppendBatchArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "events" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendBatchArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype42, _size39, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Events", "", err)
  }
  p.Events = thrift.NewTList(_etype42, _size39)
  for _i43:= 0; _i43 < _size39; _i43++ {
    _elem44 := NewThriftFlumeEvent()
    err47 := _elem44.Read(iprot)
    if err47 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem44ThriftFlumeEvent", err47); }
    p.Events.Push(_elem44)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *AppendBatchArgs) ReadFieldEvents(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AppendBatchArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("appendBatch_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendBatchArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Events != nil {
    err = oprot.WriteFieldBegin("events", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "events", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Events.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter48 := range p.Events.Iter() {
      Iter49 := Iter48.(*ThriftFlumeEvent)
      err = Iter49.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ThriftFlumeEvent", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "events", p.ThriftName(), err); }
  }
  return err
}

func (p *AppendBatchArgs) WriteFieldEvents(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AppendBatchArgs) TStructName() string {
  return "AppendBatchArgs"
}

func (p *AppendBatchArgs) ThriftName() string {
  return "appendBatch_args"
}

func (p *AppendBatchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendBatchArgs(%+v)", *p)
}

func (p *AppendBatchArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AppendBatchArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Events.CompareTo(data.Events); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AppendBatchArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Events
  }
  return nil
}

func (p *AppendBatchArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("events", thrift.LIST, 1),
    })
}

/**
 * Attributes:
 *  - Success
 */
type AppendBatchResult struct {
  thrift.TStruct
  Success Status "success"; // 0
}

func NewAppendBatchResult() *AppendBatchResult {
  output := &AppendBatchResult{
    TStruct:thrift.NewTStruct("appendBatch_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    }),
  }
  {
  }
  return output
}

func (p *AppendBatchResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendBatchResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v50, err51 := iprot.ReadI32()
  if err51 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err51); }
  p.Success = Status(v50)
  return err
}

func (p *AppendBatchResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AppendBatchResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("appendBatch_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AppendBatchResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AppendBatchResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AppendBatchResult) TStructName() string {
  return "AppendBatchResult"
}

func (p *AppendBatchResult) ThriftName() string {
  return "appendBatch_result"
}

func (p *AppendBatchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendBatchResult(%+v)", *p)
}

func (p *AppendBatchResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AppendBatchResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AppendBatchResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *AppendBatchResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    })
}


